// Sources flattened with hardhat v2.19.5 https://hardhat.org

// SPDX-License-Identifier: MIT

// File contracts/YourContract.sol

// Original license: SPDX_License_Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)
// import "@openzeppelin/contracts/access/Ownable.sol";
/*

 d8b                                     d8b                       d8b        
 ?88                                     88P                       88P        
  88b                                   d88                       d88         
  888888b  d888b8b   .d888b, d8888b d888888       d8888b d888b8b  888   d8888b
  88P `?8bd8P' ?88   ?8b,   d8b_,dPd8P' ?88      d8P' `Pd8P' ?88  ?88  d8P' `P
 d88,  d8888b  ,88b    `?8b 88b    88b  ,88b     88b    88b  ,88b  88b 88b    
d88'`?88P'`?88P'`88b`?888P' `?888P'`?88P'`88b    `?888P'`?88P'`88b  88b`?888P'
       
	                                                                          
                                                                              
                                                                              
																			  */
/**
 * A smart contract that allows changing a state variable of the contract and tracking the changes
 * It also allows the owner to withdraw the Ether in the contract
 * @author BuidlGuidl
 */
contract YourContract {


	function add(uint256 a, uint256 b) public pure returns (uint256) {
		return a + b;
	}
	function sub(uint256 a, uint256 b) public pure returns (uint256) {
		return a - b;
	}
	function mul(uint256 a, uint256 b) public pure returns (uint256) {
		return a * b;
	}
	function div(uint256 a, uint256 b) public pure returns (uint256) {
		return a / b;
	}


}
